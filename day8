1. N-th Tribonacci Number 
  The Tribonacci sequence Tn is defined as follows:  
T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0. 
Given n, return the value of Tn. 
Example 1: 
Input: n = 4 
Output: 4 
Explanation: 
T_3 = 0 + 1 + 1 = 2 
T_4 = 1 + 1 + 2 = 4 
Example 2: Input: n = 25 
Output: 1389537 
 Constraints: 0 <= n <= 37 
The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1. 
CODE: 
def tribonacci(n: int) -> int: 
    if n == 0: 
        return 0 
    if n in (1, 2): 
        return 1 
    dp = [0, 1, 1]  
    for i in range(3, n + 1): 
        dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3]) 
    return dp[n] 
print(tribonacci(4))   




          1.Climbing Stairs 
You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 
2 steps. In how many distinct ways can you climb to the top? 
Example 1: Input: n = 2 
                          Output: 2 
                          Explanation: There are two ways to climb to the top. 
                          1. 1 step + 1 step 
                          2. 2 steps 
Constraints:1 <= n <= 45 
CODE: 
def climbStairs(n: int) -> int: 
    if n == 1: 
        return 1 
    dp = [0] * (n + 1) 
    dp[1], dp[2] = 1, 2 
    for i in range(3, n + 1): 
        dp[i] = dp[i - 1] + dp[i - 2] 
    return dp[n] 
print(climbStairs(2)) 
