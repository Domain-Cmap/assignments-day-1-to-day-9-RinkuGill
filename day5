1. Searching a Number 
Given an integer k and array arr. Your task is to return the position of the first 
occurrence of k in the given array and if element k is not present in the array 
then return -1. 
Note: 1-based indexing is followed here. 
Example1: 
Input: k = 16 , arr = [9, 7, 16, 16, 4] 
Output: 3 
Explanation: The value 16 is found in the given array at positions 3 and 
with position 3 being the first occurrence. 
Example2: 
Input: k=98 , arr = [1, 22, 57, 47, 34, 18, 66] 
4, 
Output: -1
  Example2: 
Input: k=9 , arr = [1, 22, 57, 47, 34, 9, 66] 
Output: 6 
Explanation: k = 98 isn't found in the given array. 
Expected Time Complexity: O(n) 
Expected Auxiliary Space: O(1) 
Constraints: 
● 1 <= arr.size <= 106 
● 1 <= arr[i] <= 109 
● 1 <= k <= 106 
Reference:: https://www.geeksforgeeks.org/problems/searching-a-number0324/1 
CODE: 
#include <iostream> 
#include <vector> 
using namespace std; 
int findFirstOccurrence(int k, vector<int>& arr) { 
for (int i = 0; i < arr.size(); i++) { 
if (arr[i] == k) { 
return i + 1; // Return 1-based index 
} 
} 
return -1; // Return -1 if k is not found
  } 
int main() { 
vector<int> arr1 = {9, 7, 16, 16, 4}; 
cout << findFirstOccurrence(16, arr1) << endl; // Output: 3 
vector<int> arr2 = {1, 22, 57, 47, 34, 18, 66}; 
cout << findFirstOccurrence(98, arr2) << endl; // Output: -1 
vector<int> arr3 = {1, 22, 57, 47, 34, 9, 66}; 
cout << findFirstOccurrence(9, arr3) << endl; // Output: 6 
return 0; 
}
2. Minimum Number of Moves to Seat Everyone 
There are n availabe seats and n students standing in a room. You are given an 
array seats of length n, where seats[i] is the position of the ith seat. You are also 
given the array students of length n, where students[j] is the position of the jth 
student. 
You may perform the following move any number of times: 
Increase or decrease the position of the ith student by 1 (i.e., moving the ith 
student from position x to x + 1 or x - 1) 
Return the minimum number of moves required to move each student to a seat 
such that no two students are in the same seat. 
Note that there may be multiple seats or students in the same position at the 
beginning. 
Example 1: 
Input: seats = [3,1,5], students = [2,7,4] 
Output: 4 
Explanation: The students are moved as follows: - The first student is moved from position 2 to position 1 using 1 move. - The second student is moved from position 7 to position 5 using 2 moves. - The third student is moved from position 4 to position 3 using 1 move. 
In total, 1 + 2 + 1 = 4 moves were used. 
Example 2: 
Input: seats = [4,1,5,9], students = [1,3,2,6] 
Output: 7 
Explanation: The students are moved as follows: - The first student is not moved. - The second student is moved from position 3 to position 4 using 1 move. - The third student is moved from position 2 to position 5 using 3 moves. - The fourth student is moved from position 6 to position 9 using 3 moves. 
In total, 0 + 1 + 3 + 3 = 7 moves were used. 
Ø Reference: https://leetcode.com/problems/minimum-number-of- 
moves-to-seat-everyone/description/ 
CODE: 
#include <iostream> 
#include <vector> 
#include <algorithm> 
using namespace std; 
int minMovesToSeats(vector<int>& seats, vector<int>& students) { 
// Sort both arrays
  sort(seats.begin(), seats.end()); 
sort(students.begin(), students.end()); 
int moves = 0; 
for (int i = 0; i < seats.size(); i++) { 
moves += abs(seats[i] - students[i]); // Calculate the moves needed for each 
student 
} 
return moves; 
} 
int main() { 
vector<int> seats1 = {3, 1, 5}; 
vector<int> students1 = {2, 7, 4}; 
cout << minMovesToSeats(seats1, students1) << endl; // Output: 4 
vector<int> seats2 = {4, 1, 5, 9}; 
vector<int> students2 = {1, 3, 2, 6}; 
cout << minMovesToSeats(seats2, students2) << endl; // Output: 7 
return 0; 
} 
OUTPUT:
