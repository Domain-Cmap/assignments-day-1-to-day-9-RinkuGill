1. Fibonacci Series Using Recursion                                                 

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci 
sequence, such that each number is the sum of the two preceding ones, starting from 0 
and 1. That is, 
F(0) = 0, F(1) = 1 
F(n) = F(n - 1) + F(n - 2), for n > 1. 
Given n, calculate F(n). 
Example 1: 
Input: n = 2 
Output: 1 
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1 
Example 2: 
Input: n = 3 
Output: 2 
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2. 
Constraints: 
0 <= n <= 30 
Implementation/Code: 
#include <iostream>                                                                  
using namespace std; 
int fibonacci(int n) { 
if (n <= 1) return n; 
return fibonacci(n - 1) + fibonacci(n - 2); 
} 
int main() { 
int n; 
cin >> n; 
if(n>=0 && n<=30) 
{ 
cout << fibonacci(n) << endl; 
} 
else 
{ 
cout<<"Invalid input."; 
return 1; 
} 
return 0; 
}


2. Reverse Linked List   
Implementation/Code: 
#include <iostream>                                                                  
using namespace std; 
// Definition for singly-linked list. 
struct ListNode { 
int val; 
ListNode* next; 
ListNode(int x) : val(x), next(nullptr) {} 
}; 
// Iterative approach to reverse the linked list 
ListNode* reverseListIterative(ListNode* head) { 
ListNode* prev = nullptr; 
ListNode* current = head; 
while (current != nullptr) { 
//Programming in C++ 
ListNode* nextNode = current->next; // Save the next node 
current->next = prev;               // Reverse the link 
prev = current;
                     //
 Move prev to current
current = nextNode;                 // Move current to next node 
} 
return prev; // New head of the reversed list 
} 
// Recursive approach to reverse the linked list 
ListNode* reverseListRecursive(ListNode* head) { 
// Base case: If the list is empty or has one node 
if (head == nullptr || head->next == nullptr) { 
return head; 
} 
// Reverse the rest of the list 
ListNode* newHead = reverseListRecursive(head->next); 
// Adjust the pointers 
head->next->next = head; 
head->next = nullptr; 
return newHead; 
} 
// Helper function to print the linked list 
void printList(ListNode* head) { 
cout<<"["; 
while (head != nullptr) { 
cout << head->val << ", "; 
head = head->next; 
} 
cout <<"]"<< endl; 
} 
// Main function to test the solution 
int main() { 
// Example 1: Create the linked list [1, 2, 3, 4, 5] 
ListNode* head = new ListNode(1); 
head->next = new ListNode(2);
head->next->next = new ListNode(3); 
head->next->next->next = new ListNode(4); 
head->next->next->next->next = new ListNode(5); 
cout << "Original List: "; 
printList(head); 
// Test iterative reversal 
ListNode* reversedIterative = reverseListIterative(head); 
cout << "Reversed List (Iterative): "; 
printList(reversedIterative); 
// Reset the list for recursive test 
head = new ListNode(1); 
head->next = new ListNode(2); 
head->next->next = new ListNode(3); 
head->next->next->next = new ListNode(4); 
head->next->next->next->next = new ListNode(5); 
// Test recursive reversal 
ListNode* reversedRecursive = reverseListRecursive(head); 
cout << "Reversed List (Recursive): "; 
printList(reversedRecursive); 
return 0; 
} 





3. Add Two Numbers                                                                          
(Medium) 
You are given two non-empty linked lists representing two non-negative integers. The 
digits are stored in reverse order, and each of their nodes contains a single digit. Add the 
two numbers and return the sum as a linked list. 
You may assume the two numbers do not contain any leading zero, except the number 0 
itself. 
Example 1: 
Input: l1 = [2,4,3], l2 = [5,6,4] 
Output: [7,0,8] 
Explanation: 342 + 465 = 807. 
Example 2: 
Input: l1 = [0], l2 = [0] 
Output: [0] 
Example 3: 
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] 
Output: [8,9,9,9,0,0,0,1] 
Constraints: 
The number of nodes in each linked list is in the range [1, 100]. 
0 <= Node.val <= 9 
It is guaranteed that the list represents a number that does not have leading zeros. 
Implementation/Code: 
#include <iostream>                                                                  
using namespace std; 
struct ListNode { 
int val; 
ListNode* next; 
ListNode(int x) : val(x), next(nullptr) {} 
}; 
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { 
ListNode* dummy = new ListNode(0); 
//Programming in C++  
ListNode* current = dummy; 
int carry = 0; 
while (l1 || l2 || carry) { 
int sum = carry; 
if (l1) { 
sum += l1->val; 
l1 = l1->next; 
} 
if (l2) { 
sum += l2->val; 
l2 = l2->next; 
} 
carry = sum / 10; 
current->next = new ListNode(sum % 10); 
current = current->next; 
} 
return dummy->next; 
} 
int main() { 
int n1, n2, val; 
cin >> n1; 
ListNode* l1 = nullptr; 
ListNode* tail1 = nullptr; 
for (int i = 0; i < n1; ++i) { 
cin >> val; 
ListNode* newNode = new ListNode(val); 
if (!l1) l1 = tail1 = newNode; 
else { 
tail1->next = newNode; 
tail1 = newNode; 
} 
} 
cin >> n2; 
ListNode* l2 = nullptr; 
ListNode* tail2 = nullptr; 
for (int i = 0; i < n2; ++i) { 
cin >> val; 
ListNode* newNode = new ListNode(val); 
if (!l2) l2 = tail2 = newNode; 
else { 
tail2->next = newNode; 
tail2 = newNode; 
} 
} 
ListNode* result = addTwoNumbers(l1, l2); 
while (result) { 
cout << result->val << " "; 
result = result->next; 
} 
return 0; 
}
