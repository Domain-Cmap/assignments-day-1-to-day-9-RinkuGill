 1. Binary Tree Inorder Traversal
   CODE: 
#include <iostream> 
#include <vector> 
using namespace std; 
struct TreeNode { 
int val; 
TreeNode *left; 
TreeNode *right; 
TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} 
}; 
void inorder(TreeNode* root, vector<int>& result) { 
if (!root) return; 
inorder(root->left, result); 
result.push_back(root->val); 
inorder(root->right, result); 
}
vector<int> inorderTraversal(TreeNode* root) { 
vector<int> result; 
inorder(root, result); 
return result; 
} 
int main() { 
// Create tree: [1, null, 2, 3] 
TreeNode* root = new TreeNode(1); 
root->right = new TreeNode(2); 
root->right->left = new TreeNode(3); 
vector<int> result = inorderTraversal(root); 
for (int val : result) { 
cout << val << " "; 
} 
cout << endl; 
return 0; 
}




2.Binary Tree Preorder Traversal 
  CODE: 
#include <iostream> 
#include <vector> 
using namespace std; 
struct TreeNode { 
int val; 
TreeNode *left;
  TreeNode *right; 
TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} 
}; 
void preorder(TreeNode* root, vector<int>& result) { 
if (!root) return; 
result.push_back(root->val); 
preorder(root->left, result); 
preorder(root->right, result); 
} 
vector<int> preorderTraversal(TreeNode* root) { 
vector<int> result; 
preorder(root, result); 
return result; 
} 
int main() { 
// Create tree: [1, null, 2, 3] 
TreeNode* root = new TreeNode(1); 
root->right = new TreeNode(2); 
root->right->left = new TreeNode(3); 
vector<int> result = preorderTraversal(root); 
for (int val : result) { 
cout << val << " "; 
} 
cout << endl; 
return 0; 
} 
